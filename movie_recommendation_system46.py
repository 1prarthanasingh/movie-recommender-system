# -*- coding: utf-8 -*-
"""movie recommendation system46.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11bY3Xt9MRqTh_46u9yNZjGsWhJN5scLw
"""

import numpy as np 
import pandas as pd
import seaborn as sns

import ast
import nltk
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

import warnings
warnings.filterwarnings('ignore')

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies.head(2)

credits.head(2)

movies.columns

credits.columns

movies.shape

credits.shape

movies.dtypes

movies = movies.merge(credits,on='title')

movies.head(5)

# Finding the top 10 grossing movies in this dataset
# Before we can do that we will need to adjust the revenue numbers with inflation

import plotly.express as px

px.bar(movies.sort_values("revenue", ascending = False).head(10).reset_index(), 
       x = "original_title", y = "revenue", title = "Highest Grossing Movies", color = "original_title",
      labels = {"original_title":"Movie Name",
               "revenue":"Revenue (USD $)"})

import matplotlib.pyplot as plt

pop= movies.sort_values('popularity', ascending=False)
import matplotlib.pyplot as plt
plt.figure(figsize=(12,4))

plt.barh(pop['title'].head(6),pop['popularity'].head(6), align='center',
        color='skyblue')
plt.gca().invert_yaxis()
plt.xlabel("Popularity")
plt.title("Popular Movies")

pop= movies.sort_values('budget', ascending=False)
import matplotlib.pyplot as plt
plt.figure(figsize=(12,4))

plt.barh(pop['title'].head(6),pop['popularity'].head(6), align='center',
        color='darkblue')
plt.gca().invert_yaxis()
plt.xlabel("Popularity")
plt.title("high budget movies")

"""Feature Engineering and Data Preprocessing"""

movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head(5)

movies.isnull().sum()

movies.dropna(inplace=True)

movies.isnull().sum()

movies.duplicated().sum()

def convert(text):
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name']) 
    return L

movies['genres'] = movies['genres'].apply(convert)
movies.head()

movies['keywords'] = movies['keywords'].apply(convert)
movies.head()

movies['cast'][0]

def convert3(text):
    L = []
    counter = 0
    for i in ast.literal_eval(text):
        if counter < 3:
            L.append(i['name'])
        counter+=1
    return L

movies['cast'] = movies['cast'].apply(convert3)
movies.head()

plt.subplots(figsize=(12,10))
list1 = []
for i in movies['genres']:
    list1.extend(i)
ax = pd.Series(list1).value_counts()[:10].sort_values(ascending=True).plot.barh(width=0.9,color=sns.color_palette('hls',10))
for i, v in enumerate(pd.Series(list1).value_counts()[:10].sort_values(ascending=True).values): 
    ax.text(.8, i, v,fontsize=12,color='white',weight='bold')
plt.title('Top Genres')
plt.show()

plt.subplots(figsize=(12,10))
list1=[]
for i in movies['cast']:
    list1.extend(i)
ax=pd.Series(list1).value_counts()[:15].sort_values(ascending=True).plot.barh(width=0.9,color=sns.color_palette('muted',40))
for i, v in enumerate(pd.Series(list1).value_counts()[:15].sort_values(ascending=True).values): 
    ax.text(.8, i, v,fontsize=10,color='white',weight='bold')
plt.title('Actors with highest appearance')
plt.show()

def fetch_director(text):
    L = []
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            L.append(i['name'])
    return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies.sample(5)

movies['overview'] = movies['overview'].apply(lambda x:x.split())
movies.head()

def collapse(L):
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

movies['cast'] = movies['cast'].apply(collapse)
movies['crew'] = movies['crew'].apply(collapse)
movies['genres'] = movies['genres'].apply(collapse)
movies['keywords'] = movies['keywords'].apply(collapse)

movies.head()

movies.tail()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

new_df = movies.drop(columns=['overview','genres','keywords','cast','crew'])

new_df['tags'] = new_df['tags'].apply(lambda x: " ".join(x))
new_df.head()

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())

new_df.head()

import nltk

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
    y=[]
    
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)

new_df['tags']=new_df['tags'].apply(stem)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vector = cv.fit_transform(new_df['tags']).toarray()

vector

from collections import Counter
from wordcloud import WordCloud

cv. get_feature_names_out()

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vector)

similarity[0]

def recommend(movie):
    movie_index = new_df[new_df['title'] == movie].index[0]
    distances=similarity[movie_index]
    movie_list = sorted(list(enumerate(distances)),reverse=True,key = lambda x: x[1])[1:6]
    mov=[]
    id=[]
    scores=[]
    
    for i in movie_list:
        mov.append(new_df.iloc[i[0]].title)
        id.append(new_df.iloc[i[0]].movie_id)
        scores.append(i[1])
    dic={'movie_id':id,'title':mov,'Similarity Score':scores}
    return pd.DataFrame(dic)

movie_name=input("enter movie name:")
popular_movies = recommend(movie_name) 
popular_movies

import requests
from IPython.display import Image, HTML, display
def movie_display(popular_movies):
 getList_name = {}
 for x, xRows in popular_movies.iterrows():

    getResponse = requests.get('https://api.themoviedb.org/3/movie/{}?api_key=c0bda0be71f7815fd6ba2eb5f5c86fd8'.format(xRows['movie_id']) ) # every movie has a unique ID 
    getData = getResponse.json() # we request the data from the API and convert it to json
    
    # a bug fixed because sometimes there are is no poster so it returrns error
    if getData['poster_path']==None:
     continue
    else:   
     getPath = "http://image.tmdb.org/t/p/w500" + getData['poster_path']    # get the path of the poster
     getList_name[xRows['title']] = getPath
 
 
 display(HTML(f"""  < <div style="font-size:24px; font-weight:Bold; color:#fff; text-align:center; padding-top:8px; height:12%; width: 100%; border:1px solid #ccc; border-radius:10px; margin-top:10px; background-color:#FA1A1A;">{movie_name}</div> """))   
 # in here he loops on the number of movies to be recommended which is in num_recommend variable in recommend() function
 for i in range(0,popular_movies.shape[0],5):
  

  display( HTML(f"""
                    <table>
                    <tr>
                        <td><img src={list(getList_name.values())[i]} style='border-radius:10px; height:400px; width:575px; border:1px solid #999;'></td>
                        <td><img src={list(getList_name.values())[i+1]} style='border-radius:10px; height:400px; width:575px; border:1px solid #999;'></td>
                        <td><img src={list(getList_name.values())[i+2]} style='border-radius:10px; height:400px; width:575px; border:1px solid #999;'></td>
                        <td><img src={list(getList_name.values())[i+3]} style='border-radius:10px; height:400px; width:575px; border:1px solid #999;'></td>
                        <td><img src={list(getList_name.values())[i+4]} style='border-radius:10px; height:400px; width:575px; border:1px solid #999;'></td>
                        
                    </tr>
                  
                        <td><div style="height:60px; padding-top:15px; text-align:center; font-size:14px; font-weight:bold; border:1px solid #ccc; border-radius:10px;">{list(getList_name.keys())[i+0]}</div></td>
                        <td><div style="height:60px; padding-top:15px; text-align:center; font-size:14px; font-weight:bold; border:1px solid #ccc; border-radius:10px;">{list(getList_name.keys())[i+1]}</div></td>
                        <td><div style="height:60px; padding-top:15px; text-align:center; font-size:14px; font-weight:bold; border:1px solid #ccc; border-radius:10px;">{list(getList_name.keys())[i+2]}</div></td>
                        <td><div style="height:60px; padding-top:15px; text-align:center; font-size:14px; font-weight:bold; border:1px solid #ccc; border-radius:10px;">{list(getList_name.keys())[i+3]}</div></td>
                        <td><div style="height:60px; padding-top:15px; text-align:center; font-size:14px; font-weight:bold; border:1px solid #ccc; border-radius:10px;">{list(getList_name.keys())[i+4]}</div></td>
                    </tr>
                    
                </table>"""))

movie_display(recommend(movie_name,))